{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","idx","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","padding","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAceA,G,MAZF,SAACC,GACV,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCiBXC,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAOC,GAGf,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLP,GAAII,EAAOG,GAAKP,GAChBC,KAAMG,EAAOG,GAAKN,KAClBC,MAAOE,EAAOG,GAAKL,aCExBO,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKd,UAAU,UACX,2BACIA,UAAU,0CACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,G,MARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,QAASC,QAAQ,SAChFxB,EAAMyB,YCkEJC,E,kDA7Db,aAAe,IAAD,8BACZ,gBAoBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAGf,YAAac,EAAME,OAAOC,SApB3C,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJH,E,gEAQO,IAAD,OAClBmB,MAAM,qEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAAErB,OAAS6B,S,+BAenB,IAAD,OACDC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC9C,OAAOA,EAAOH,KAAKoC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAGnE,OAAiC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACb,wBAAI1C,UAAU,SAAd,0BAGqB,IAA1BqC,EAAeK,OAEf,yBAAK1C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,wBAAI1B,UAAU,MAAd,0BAMJ,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAS8B,U,GArDbM,a,MCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.826242da.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className='tc grow bg-light-green br3 pa0 ma2 dib bw2 shadow-5'>\n            <img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`} />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n        {\n            robots.map((user , idx) => {\n                //Unique and static key is required for each child in an iterator/array.\n                //This will help react to keep track of each comonent.\n                return (\n                    <Card \n                    key={idx} \n                    id={robots[idx].id} \n                    name={robots[idx].name} \n                    email={robots[idx].email}\n                    />\n                );\n            })\n        }\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='tc pa2'>\n            <input \n                className='tc pa3 br3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Robots' \n                onChange={searchChange} //HTML inbuilt\n            />\n        </div>\n        \n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '0px solid black', height: '600px', padding:'20px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\n\n// For instructor version: https://github.com/aneagoie/robofriends\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/pjmahesh/fake_json/master/users')\n    .then(response => response.json())\n    .then(users => {\n      this.setState({ robots : users })\n    }); \n  }\n\n\n\n  //Inbuilt function\n  //It is not : onSearchChange (event) { : It is a rule, for any fn you make, it should have the things \n  //created by the class. So it has to be passed clearly. If it is a react function, no eed for arrow function.\n  onSearchChange = (event) => {\n    this.setState({  searchfield: event.target.value }) //React feature. We dont have to do this.state.searchfield = \n    //console.log( event.target.value);\n  }\n\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    //onsole.log(filteredRobots);\n    if (this.state.robots.length === 0){\n      return <h1 className='f2 tc'>RoboFriends Loading...</h1>\n    } \n\n    if (filteredRobots.length === 0){\n      return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <h1 className='f1'>No matching results!</h1>\n          </Scroll>\n        </div>\n      );\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={ filteredRobots}/>\n          </Scroll>\n        </div>\n      );\n    }\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}